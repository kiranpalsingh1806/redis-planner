"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Abstract base class that all fields you want to filter
 * with extend. When you call {@link Search.where}, a
 * subclass of this is returned.
 */
class WhereField {
    negated = false;
    /** @internal */
    search;
    /** @internal */
    field;
    /** @internal */
    constructor(search, field) {
        this.search = search;
        this.field = field;
    }
    /**
     * Returns the current instance. Syntactic sugar to make your code more fluent.
     * @returns this
     */
    get is() {
        return this;
    }
    /**
     * Returns the current instance. Syntactic sugar to make your code more fluent.
     * @returns this
     */
    get does() {
        return this;
    }
    /**
     * Negates the query on the field, cause it to match when the condition is
     * *not* met. Calling this multiple times will negate the negation.
     * @returns this
     */
    get not() {
        this.negate();
        return this;
    }
    /** @internal */
    negate() {
        this.negated = !this.negated;
    }
    /** @internal */
    buildQuery(valuePortion) {
        const negationPortion = this.negated ? '-' : '';
        const fieldPortion = this.field;
        return `(${negationPortion}@${fieldPortion}:${valuePortion})`;
    }
}
exports.default = WhereField;
