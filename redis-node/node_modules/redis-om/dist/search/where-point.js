"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Circle = void 0;
const tslib_1 = require("tslib");
const where_field_1 = tslib_1.__importDefault(require("./where-field"));
/** A builder that defines a circle. */
class Circle {
    /** @internal */
    longitudeOfOrigin = 0;
    /** @internal */
    latitudeOfOrigin = 0;
    /** @internal */
    size = 1;
    /** @internal */
    units = 'm';
    /**
     * Sets the longitude. If not set, defaults to 0.0.
     *
     * @param value The longitude.
     * @returns This instance.
     */
    longitude(value) {
        this.longitudeOfOrigin = value;
        return this;
    }
    /**
     * Sets the latitude. If not set, defaults to 0.0.
     *
     * @param value The latitude.
     * @returns This instance.
     */
    latitude(value) {
        this.latitudeOfOrigin = value;
        return this;
    }
    /** @internal */
    origin(pointOrLongitude, latitude) {
        if (typeof pointOrLongitude === 'number' && latitude !== undefined) {
            this.longitudeOfOrigin = pointOrLongitude;
            this.latitudeOfOrigin = latitude;
        }
        else {
            const point = pointOrLongitude;
            this.longitudeOfOrigin = point.longitude;
            this.latitudeOfOrigin = point.latitude;
        }
        return this;
    }
    /**
     * Sets the radius of the {@link Circle}. Defaults to 1. If units are
     * not specified, defaults to meters.
     *
     * @param size The radius of the circle.
     * @returns This instance.
     */
    radius(size) {
        this.size = size;
        return this;
    }
    /**
     * Sets the units to meters.
     * @returns This instance.
     */
    get m() { return this.meters; }
    /**
     * Sets the units to meters.
     * @returns This instance.
     */
    get meter() { return this.meters; }
    /**
     * Sets the units to meters.
     * @returns This instance.
     */
    get meters() {
        this.units = 'm';
        return this;
    }
    /**
     * Sets the units to kilometers.
     * @returns This instance.
     */
    get km() { return this.kilometers; }
    ;
    /**
     * Sets the units to kilometers.
     * @returns This instance.
     */
    get kilometer() { return this.kilometers; }
    /**
     * Sets the units to kilometers.
     * @returns This instance.
     */
    get kilometers() {
        this.units = 'km';
        return this;
    }
    /**
     * Sets the units to feet.
     * @returns This instance.
     */
    get ft() { return this.feet; }
    ;
    /**
     * Sets the units to feet.
     * @returns This instance.
     */
    get foot() { return this.feet; }
    /**
     * Sets the units to feet.
     * @returns This instance.
     */
    get feet() {
        this.units = 'ft';
        return this;
    }
    /**
     * Sets the units to miles.
     * @returns This instance.
     */
    get mi() { return this.miles; }
    ;
    /**
     * Sets the units to miles.
     * @returns This instance.
     */
    get mile() { return this.miles; }
    /**
     * Sets the units to miles.
     * @returns This instance.
     */
    get miles() {
        this.units = 'mi';
        return this;
    }
}
exports.Circle = Circle;
class WherePoint extends where_field_1.default {
    circle = new Circle();
    inRadius(circleFn) {
        return this.inCircle(circleFn);
    }
    inCircle(circleFn) {
        this.circle = circleFn(this.circle);
        return this.search;
    }
    toString() {
        const { longitudeOfOrigin, latitudeOfOrigin, size, units } = this.circle;
        return this.buildQuery(`[${longitudeOfOrigin} ${latitudeOfOrigin} ${size} ${units}]`);
    }
}
exports.default = WherePoint;
