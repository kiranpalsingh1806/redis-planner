import Entity from "../entity/entity";
import EntityConstructor from "../entity/entity-constructor";
import DataStructure from './options/data-structure';
import StopWordOptions from './options/stop-word-options';
import SchemaOptions from './options/schema-options';
import SchemaDefinition from './definition/schema-definition';
/**
 * Defines a schema that determines how an {@link Entity} is mapped to Redis
 * data structures. Construct by passing in an {@link EntityConstructor},
 * a {@link SchemaDefinition}, and optionally {@link SchemaOptions}:
 *
 * ```typescript
 * const schema = new Schema(Foo, {
 *   aString: { type: 'string' },
 *   aNumber: { type: 'number' },
 *   aBoolean: { type: 'boolean' },
 *   someText: { type: 'text' },
 *   aPoint: { type: 'point' },
 *   aDate: { type: 'date' },
 *   someStrings: { type: 'string[]' }
 * }, {
 *   dataStructure: 'HASH'
 * });
 * ```
 *
 * A Schema is primarily used by a {@link Repository} which requires a Schema in
 * its constructor.
 *
 * @template TEntity The {@link Entity} this Schema defines.
 */
export default class Schema<TEntity extends Entity> {
    /**
     * The provided {@link EntityConstructor}.
     * @internal
     */
    readonly entityCtor: EntityConstructor<TEntity>;
    /**
     * The provided {@link SchemaDefinition}.
     * @internal
     */
    readonly definition: SchemaDefinition;
    private options?;
    /**
     * @template TEntity The {@link Entity} this Schema defines.
     * @param ctor A constructor that creates an {@link Entity} of type TEntity.
     * @param schemaDef Defines all of the fields for the Schema and how they are mapped to Redis.
     * @param options Additional options for this Schema.
     */
    constructor(ctor: EntityConstructor<TEntity>, schemaDef: SchemaDefinition, options?: SchemaOptions);
    /** The configured keyspace prefix in Redis for this Schema. */
    get prefix(): string;
    /** The configured name for the RediSearch index for this Schema. */
    get indexName(): string;
    /** The configured name for the RediSearch index hash for this Schema. */
    get indexHashName(): string;
    /**
     * The configured data structure, a string with the value of either `HASH` or `JSON`,
     * that this Schema uses to store {@link Entity | Entities} in Redis.
     * */
    get dataStructure(): DataStructure;
    /**
     * The configured usage of stop words, a string with the value of either `OFF`, `DEFAULT`,
     * or `CUSTOM`. See {@link SchemaOptions.useStopWords} and {@link SchemaOptions.stopWords}
     * for more details.
     */
    get useStopWords(): StopWordOptions;
    /**
     * The configured stop words. Ignored if {@link Schema.useStopWords} is anything other
     * than `CUSTOM`.
     */
    get stopWords(): Array<string>;
    /**
     * The configured indexed default setting for fields
     */
    get indexedDefault(): boolean;
    /** The hash value of this index. Stored in Redis under {@link Schema.indexHashName}. */
    get indexHash(): string;
    /** @internal */
    get redisSchema(): Array<string>;
    /**
     * Generates a unique string using the configured {@link IdStrategy}.
     * @returns
     */
    generateId(): string;
    private defineProperties;
    private validateOptions;
    private validateFieldDef;
}
