import Entity from "../../entity/entity";
import BaseFieldDefinition from "../definition/base-field-definition";
import CaseSensitiveFieldDefinition from "../definition/casesensitive-field-definition";
import StemmingFieldDefinition from "../definition/stemming-field-definition";
import PhoneticFieldDefinition from "../definition/phonetic-field-definition";
import SeparableFieldDefinition from "../definition/separable-field-definition";
import SortableFieldDefinition from "../definition/sortable-field-definition";
import NormalizedFieldDefinition from "../definition/normalized-field-definition";
import WeightFieldDefinition from "../definition/weight-field-definition";
import Schema from "../schema";
export default abstract class SchemaBuilder<TEntity extends Entity> {
    protected schema: Schema<TEntity>;
    constructor(schema: Schema<TEntity>);
    get redisSchema(): Array<string>;
    protected abstract buildEntry(field: string): Array<string>;
    protected buildCaseInsensitive(field: CaseSensitiveFieldDefinition): string[];
    protected buildIndexed(field: BaseFieldDefinition): string[];
    protected buildStemming(field: StemmingFieldDefinition): string[];
    protected buildPhonetic(field: PhoneticFieldDefinition): string[];
    protected buildSeparable(field: SeparableFieldDefinition): string[];
    protected buildSortable(field: SortableFieldDefinition): string[];
    protected buildNormalized(field: NormalizedFieldDefinition): string[];
    protected buildWeight(field: WeightFieldDefinition): string[];
}
