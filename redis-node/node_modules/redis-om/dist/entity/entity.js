"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const entity_boolean_field_1 = tslib_1.__importDefault(require("./fields/entity-boolean-field"));
const entity_date_field_1 = tslib_1.__importDefault(require("./fields/entity-date-field"));
const entity_number_field_1 = tslib_1.__importDefault(require("./fields/entity-number-field"));
const entity_point_field_1 = tslib_1.__importDefault(require("./fields/entity-point-field"));
const entity_string_array_field_1 = tslib_1.__importDefault(require("./fields/entity-string-array-field"));
const entity_string_field_1 = tslib_1.__importDefault(require("./fields/entity-string-field"));
const entity_text_field_1 = tslib_1.__importDefault(require("./fields/entity-text-field"));
const ENTITY_FIELD_CONSTRUCTORS = {
    'string': entity_string_field_1.default,
    'number': entity_number_field_1.default,
    'boolean': entity_boolean_field_1.default,
    'text': entity_text_field_1.default,
    'date': entity_date_field_1.default,
    'point': entity_point_field_1.default,
    'string[]': entity_string_array_field_1.default
};
/**
 * An Entity is the class from which objects that Redis OM maps to are made. You need
 * to subclass Entity in your application:
 *
 * ```typescript
 * class Foo extends Entity {}
 * ```
 */
class Entity {
    /** The generated entity ID. */
    entityId;
    schemaDef;
    prefix;
    entityFields = {};
    /**
     * Creates an new Entity.
     * @internal
     */
    constructor(schema, id, data = {}) {
        this.schemaDef = schema.definition;
        this.prefix = schema.prefix;
        this.entityId = id;
        this.createFields(data);
    }
    /**
     * Create the fields on the Entity.
     * @internal
     */
    createFields(data) {
        Object.keys(this.schemaDef).forEach(fieldName => {
            const fieldDef = this.schemaDef[fieldName];
            const fieldType = fieldDef.type;
            const fieldAlias = fieldDef.alias ?? fieldName;
            const fieldValue = data[fieldAlias] ?? null;
            const entityField = new ENTITY_FIELD_CONSTRUCTORS[fieldType](fieldName, fieldDef, fieldValue);
            this.entityFields[fieldAlias] = entityField;
        });
    }
    ;
    /**
     * @returns The keyname this {@link Entity} is stored with in Redis.
     */
    get keyName() {
        return `${this.prefix}:${this.entityId}`;
    }
    /**
     * Converts this {@link Entity} to a JavaScript object suitable for stringification.
     * @returns a JavaScript object.
     */
    toJSON() {
        const json = { entityId: this.entityId };
        Object.keys(this.schemaDef).forEach(field => {
            json[field] = this[field];
        });
        return json;
    }
    /**
     * Converts this {@link Entity} to a JavaScript object suitable for writing to RedisJSON.
     * @internal
     */
    toRedisJson() {
        let data = {};
        Object.keys(this.entityFields).forEach(field => {
            const entityField = this.entityFields[field];
            data = { ...data, ...entityField.toRedisJson() };
        });
        return data;
    }
    /**
     * Loads this {@link Entity} from Redis JSON data.
     * @internal
     */
    fromRedisJson(data) {
        if (!data)
            return data;
        Object.keys(data).forEach(field => {
            this.entityFields[field].fromRedisJson(data[field]);
        });
    }
    /**
     * Converts this {@link Entity} to a JavaScript object suitable for writing to a Redis Hash.
     * @internal
     */
    toRedisHash() {
        let data = {};
        Object.keys(this.entityFields).forEach(field => {
            const entityField = this.entityFields[field];
            data = { ...data, ...entityField.toRedisHash() };
        });
        return data;
    }
    /**
     * Loads this {@link Entity} from Redis Hash data.
     * @internal
     */
    fromRedisHash(data) {
        Object.keys(data).forEach(field => {
            this.entityFields[field].fromRedisHash(data[field]);
        });
    }
}
exports.default = Entity;
