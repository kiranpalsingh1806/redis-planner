import EntityData from "./entity-data";
import Schema from "../schema/schema";
import { RedisJsonData, RedisHashData } from "../client";
/**
 * An Entity is the class from which objects that Redis OM maps to are made. You need
 * to subclass Entity in your application:
 *
 * ```typescript
 * class Foo extends Entity {}
 * ```
 */
export default abstract class Entity {
    /** The generated entity ID. */
    readonly entityId: string;
    private schemaDef;
    private prefix;
    private entityFields;
    /**
     * Creates an new Entity.
     * @internal
     */
    constructor(schema: Schema<any>, id: string, data?: EntityData);
    /**
     * Create the fields on the Entity.
     * @internal
     */
    private createFields;
    /**
     * @returns The keyname this {@link Entity} is stored with in Redis.
     */
    get keyName(): string;
    /**
     * Converts this {@link Entity} to a JavaScript object suitable for stringification.
     * @returns a JavaScript object.
     */
    toJSON(): Record<string, any>;
    /**
     * Converts this {@link Entity} to a JavaScript object suitable for writing to RedisJSON.
     * @internal
     */
    toRedisJson(): RedisJsonData;
    /**
     * Loads this {@link Entity} from Redis JSON data.
     * @internal
     */
    fromRedisJson(data: RedisJsonData): undefined;
    /**
     * Converts this {@link Entity} to a JavaScript object suitable for writing to a Redis Hash.
     * @internal
     */
    toRedisHash(): RedisHashData;
    /**
     * Loads this {@link Entity} from Redis Hash data.
     * @internal
     */
    fromRedisHash(data: RedisHashData): void;
}
