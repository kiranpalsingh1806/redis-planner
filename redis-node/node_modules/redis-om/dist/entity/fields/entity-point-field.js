"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const entity_field_1 = tslib_1.__importDefault(require("./entity-field"));
const IS_COORD_PAIR = /^-?\d+(\.\d*)?,-?\d+(\.\d*)?$/;
class EntityPointField extends entity_field_1.default {
    toRedisJson() {
        const data = {};
        if (this.value !== null)
            data[this.name] = this.valueAsString;
        return data;
    }
    ;
    fromRedisJson(value) {
        if (value === null) {
            this.value = null;
        }
        else if (value.toString().match(IS_COORD_PAIR)) {
            const [longitude, latitude] = value.split(',').map(Number.parseFloat);
            this.value = { longitude, latitude };
        }
        else {
            throw Error(`Non-point value of '${value}' read from Redis for point field.`);
        }
    }
    toRedisHash() {
        const data = {};
        if (this.value !== null)
            data[this.name] = this.valueAsString;
        return data;
    }
    ;
    fromRedisHash(value) {
        if (value.match(IS_COORD_PAIR)) {
            const [longitude, latitude] = value.split(',').map(Number.parseFloat);
            this.value = { longitude, latitude };
        }
        else {
            throw Error(`Non-point value of '${value}' read from Redis for point field.`);
        }
    }
    validateValue(value) {
        super.validateValue(value);
        if (value !== null) {
            if (!this.isPoint(value))
                throw Error(`Expected value with type of 'point' but received '${value}'.`);
            // As per https://redis.io/commands/geoadd/ and local testing
            // Valid latitudes are from -85.05112878 to 85.05112878 degrees (*NOT* -90 to +90)
            const { longitude, latitude } = value;
            if (Math.abs(latitude) > 85.05112878 || Math.abs(longitude) > 180)
                throw Error(`Expected value with valid 'point' but received '${longitude},${latitude}'.`);
        }
    }
    isPoint(value) {
        return this.isNumber(value.longitude) && this.isNumber(value.latitude);
    }
    get valueAsString() {
        const { longitude, latitude } = this.value;
        return `${longitude},${latitude}`;
    }
}
exports.default = EntityPointField;
