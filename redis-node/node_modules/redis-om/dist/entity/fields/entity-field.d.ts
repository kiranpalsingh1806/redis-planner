import { RedisHashData, RedisJsonData } from "../../client";
import FieldDefinition from "../../schema/definition/field-definition";
import EntityValue from "../entity-value";
declare abstract class EntityField {
    private _name;
    private _value;
    protected fieldDef: FieldDefinition;
    constructor(name: string, fieldDef: FieldDefinition, value?: EntityValue);
    get name(): string;
    get value(): EntityValue;
    set value(value: EntityValue);
    toRedisJson(): RedisJsonData;
    fromRedisJson(value: any): void;
    toRedisHash(): RedisHashData;
    fromRedisHash(value: string): void;
    protected validateValue(value: EntityValue): void;
    protected convertValue(value: EntityValue): EntityValue;
    protected isString(value: EntityValue): boolean;
    protected isNumber(value: EntityValue): boolean;
    protected isBoolean(value: EntityValue): boolean;
}
export default EntityField;
