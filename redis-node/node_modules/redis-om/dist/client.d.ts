import RedisShim, { RedisConnection } from './shims/redis-shim';
import Repository from './repository/repository';
import Entity from './entity/entity';
import Schema from './schema/schema';
/**
 * Alias for a JavaScript object used by HSET.
 * @internal
 */
export declare type RedisHashData = {
    [key: string]: string;
};
/**
 * Alias for any old JavaScript object used by JSON.SET.
 * @internal
 */
export declare type RedisJsonData = {
    [key: string]: any;
};
/** The type of data structure in Redis to map objects to. */
export declare type SearchDataStructure = 'HASH' | 'JSON';
/** @internal */
export declare type CreateIndexOptions = {
    indexName: string;
    dataStructure: SearchDataStructure;
    schema: Array<string>;
    prefix: string;
    stopWords?: Array<string>;
};
/** @internal */
export declare type LimitOptions = {
    offset: number;
    count: number;
};
/** @internal */
export declare type SortOptions = {
    field: string;
    order: 'ASC' | 'DESC';
};
/** @internal */
export declare type SearchOptions = {
    indexName: string;
    query: string;
    limit?: LimitOptions;
    sort?: SortOptions;
    keysOnly?: boolean;
};
/**
 * A Client is the starting point for working with Redis OM. Clients manage the
 * connection to Redis and provide limited functionality for executing Redis commands.
 * Create a client and open it before you use it:
 *
 * ```typescript
 * const client = new Client();
 * await client.open();
 * ```
 *
 * A Client is primarily used by a {@link Repository} which requires a client in
 * its constructor.
 */
export default class Client {
    /** @internal */
    protected shim?: RedisShim;
    /**
     * Attaches an existing Node Redis connection to this Redis OM client. Closes
     * any existing connection.
     * @param connection An existing Node Redis client.
     * @returns This {@link Client} instance.
     */
    use(connection: RedisConnection): Promise<Client>;
    /**
     * Open a connection to Redis at the provided URL.
     * @param url A URL to Redis as defined with the [IANA](https://www.iana.org/assignments/uri-schemes/prov/redis).
     * @returns This {@link Client} instance.
     */
    open(url?: string): Promise<Client>;
    /**
     * Execute an arbitrary Redis command.
     * @template TResult Expect result type such as `string`, `Array<string>`, or whatever complex type Redis returns.
     * @param command The command to execute.
     * @returns The raw results of calling the Redis command.
     */
    execute(command: Array<string | number | boolean>): Promise<unknown>;
    /**
     * Creates a repository for the given schema.
     * @template TEntity The entity type for this {@link Schema} and {@link Repository}.
     * @param schema The schema.
     * @returns A repository for the provided schema.
     */
    fetchRepository<TEntity extends Entity>(schema: Schema<TEntity>): Repository<TEntity>;
    /**
     * Close the connection to Redis.
     */
    close(): Promise<void>;
    /** @internal */
    createIndex(options: CreateIndexOptions): Promise<void>;
    /** @internal */
    dropIndex(indexName: string): Promise<void>;
    /** @internal */
    search(options: SearchOptions): Promise<any[]>;
    /** @internal */
    unlink(...keys: string[]): Promise<void>;
    /** @internal */
    expire(key: string, ttl: number): Promise<void>;
    /** @internal */
    get(key: string): Promise<string | null>;
    /** @internal */
    set(key: string, value: string): Promise<void>;
    /** @internal */
    hgetall(key: string): Promise<RedisHashData>;
    /** @internal */
    hsetall(key: string, data: RedisHashData): Promise<void>;
    /** @internal */
    jsonget(key: string): Promise<RedisJsonData>;
    /** @internal */
    jsonset(key: string, data: RedisJsonData): Promise<void>;
    /**
     * @returns Whether a connection is already open.
     */
    isOpen(): boolean;
    private validateShimOpen;
}
